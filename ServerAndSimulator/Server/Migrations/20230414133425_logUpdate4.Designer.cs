// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.DAL;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230414133425_logUpdate4")]
    partial class logUpdate4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Server.DAL.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeparture")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassengersCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Server.DAL.Models.Leg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ChangePlaneStatus")
                        .HasColumnType("bit");

                    b.Property<int>("CrossingTime")
                        .HasColumnType("int");

                    b.Property<bool>("IsDepartureLeg")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStartingLeg")
                        .HasColumnType("bit");

                    b.Property<int>("NextLegs")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("RepresentationalNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Legs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChangePlaneStatus = false,
                            CrossingTime = 0,
                            IsDepartureLeg = false,
                            IsOccupied = false,
                            IsStartingLeg = true,
                            NextLegs = 1,
                            Number = 256,
                            RepresentationalNumber = 0
                        },
                        new
                        {
                            Id = 2,
                            ChangePlaneStatus = false,
                            CrossingTime = 1,
                            IsDepartureLeg = false,
                            IsOccupied = false,
                            IsStartingLeg = false,
                            NextLegs = 2,
                            Number = 1,
                            RepresentationalNumber = 1
                        },
                        new
                        {
                            Id = 3,
                            ChangePlaneStatus = false,
                            CrossingTime = 2,
                            IsDepartureLeg = false,
                            IsOccupied = false,
                            IsStartingLeg = false,
                            NextLegs = 4,
                            Number = 2,
                            RepresentationalNumber = 2
                        },
                        new
                        {
                            Id = 4,
                            ChangePlaneStatus = false,
                            CrossingTime = 3,
                            IsDepartureLeg = false,
                            IsOccupied = false,
                            IsStartingLeg = false,
                            NextLegs = 8,
                            Number = 4,
                            RepresentationalNumber = 3
                        },
                        new
                        {
                            Id = 5,
                            ChangePlaneStatus = false,
                            CrossingTime = 5,
                            IsDepartureLeg = true,
                            IsOccupied = false,
                            IsStartingLeg = false,
                            NextLegs = 16,
                            Number = 8,
                            RepresentationalNumber = 4
                        },
                        new
                        {
                            Id = 6,
                            ChangePlaneStatus = false,
                            CrossingTime = 3,
                            IsDepartureLeg = false,
                            IsOccupied = false,
                            IsStartingLeg = false,
                            NextLegs = 96,
                            Number = 16,
                            RepresentationalNumber = 5
                        },
                        new
                        {
                            Id = 7,
                            ChangePlaneStatus = true,
                            CrossingTime = 10,
                            IsDepartureLeg = false,
                            IsOccupied = false,
                            IsStartingLeg = false,
                            NextLegs = 128,
                            Number = 32,
                            RepresentationalNumber = 6
                        },
                        new
                        {
                            Id = 8,
                            ChangePlaneStatus = true,
                            CrossingTime = 10,
                            IsDepartureLeg = false,
                            IsOccupied = false,
                            IsStartingLeg = false,
                            NextLegs = 128,
                            Number = 64,
                            RepresentationalNumber = 7
                        },
                        new
                        {
                            Id = 9,
                            ChangePlaneStatus = false,
                            CrossingTime = 5,
                            IsDepartureLeg = false,
                            IsOccupied = false,
                            IsStartingLeg = false,
                            NextLegs = 8,
                            Number = 128,
                            RepresentationalNumber = 8
                        });
                });

            modelBuilder.Entity("Server.DAL.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlightNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("In")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LegNum")
                        .HasColumnType("int");

                    b.Property<int>("NextLegNum")
                        .HasColumnType("int");

                    b.Property<string>("Out")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassengersCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
